---
- name: Install packages
  package:
    name:
      - firewalld
      - glusterfs-server
      - nginx
      - certbot
      - python2-certbot-dns-route53

- name: Enable firewall services
  firewalld:
    state: enabled
    permanent: true
    service: "{{ item }}"
  loop:
    - http
    - https
    - glusterfs

- name: Create brick directory
  file:
    path: "{{ hlws_gluster_brick }}"
    state: directory
  tags:
    - glusterfs

- name: Create GlusterFS volume
  gluster_volume:
    state: present
    name: "{{ hlws_gluster_volume }}"
    cluster: "{{ ansible_play_batch }}"
    bricks: "{{ hlws_gluster_brick }}"
    replicas: "{{ ansible_play_batch | length }}"
  run_once: true
  tags:
    - glusterfs

- name: Install Systemd units
  template:
    src: "{{ item.key }}.j2"
    dest: "{{ hlws_systemd_dir }}/{{ item.value }}"
    mode: 0644
  with_dict:
    mount: "{{ hlws_letsencrypt_dir[1:] | replace('/', '-') }}.mount"
    letsencrypt.service: letsencrypt.service
    update-letsencrypt.service: "{{ hlws_update_unit }}.service"
    update-letsencrypt.timer: "{{ hlws_update_unit }}.timer"
  register: systemd_units
  tags:
    - glusterfs
    - systemd

- name: Reload Systemd daemon
  command: systemctl daemon-reload
  when: systemd_units.changed
  tags:
    - glusterfs
    - systemd

- name: Enable and start GlusterFS mount
  service:
    name: "{{ hlws_letsencrypt_dir[1:] | replace('/', '-') }}.mount"
    enabled: true
    state: started
  tags:
    - glusterfs
    - systemd

- name: Configure AWS credentials
  ini_file:
    path: "{{ hlws_letsencrypt_dir }}/aws.ini"
    create: true
    mode: 0600
    section: default
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict:
    aws_access_key_id: "{{ hlws_aws_key_id }}"
    aws_secret_access_key: "{{ hlws_aws_secret }}"
  run_once: true
  no_log: true
  tags:
    - letsencrypt

- name: Install Nginx reload script
  copy:
    dest: "{{ hlws_nginx_reload_script }}"
    mode: 0755
    content: |
      #!/bin/bash
      /usr/sbin/nginx -t && /usr/bin/systemctl reload nginx.service
  tags:
    - letsencrypt

- name: Configure Letsencrypt CLI
  ini_file:
    path: "{{ hlws_letsencrypt_dir }}/cli.ini"
    section: null
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_dict:
    noninteractive: "true"
    max-log-backups: 0
    email: "{{ hlws_letsencrypt_email }}"
    dns-route53: "true"
    agree-tos: "true"
    deploy-hook: "{{ hlws_nginx_reload_script }}"
  run_once: true
  tags:
    - letsencrypt

- name: Set Letsencrypt staging/prod mode
  ini_file:
    path: "{{ hlws_letsencrypt_dir }}/cli.ini"
    section: null
    option: "staging"
    value: "true"
    state: "{{ hlws_letsencrypt_staging | ternary('present', 'absent') }}"
  run_once: true
  tags:
    - letsencrypt

- name: Configure Letsencrypt log rotation
  include_role:
    name: devgateway.logrotate
  vars:
    lgrt_name: letsencrypt
    lgrt_path: "{{ hlws_letsencrypt_log }}"
    lgrt_config: {}
  tags:
    - letsencrypt

- name: Initialize Letsencrypt certificate
  environment:
    AWS_CONFIG_FILE: "{{ hlws_letsencrypt_dir }}/aws.ini"
  command: >
    certbot certonly
    --noninteractive
    --agree-tos
    --dns-route53
    {% if hlws_letsencrypt_staging %}
    --staging
    {% endif %}
    --domain {{ ('*.' ~ hlws_domain) | quote }}
    --email {{ hlws_letsencrypt_email }}
  args:
    creates: "{{ hlws_letsencrypt_dir }}/live/{{ hlws_domain }}/fullchain.pem"
  run_once: true
  tags:
    - letsencrypt

- name: Configure Pacemaker
  include_role:
    name: devgateway.pacemaker
  vars:
    pacemaker_cluster_options:
      no-quorum-policy: ignore
      stonith-enabled: false
    pacemaker_simple_resources:
      nginx:
        resource:
          class: service
          type: nginx
        op:
          - name: monitor
            interval: 10s
      virtualip:
        resource:
          class: ocf
          provider: heartbeat
          type: IPaddr2
        options:
          ip: "{{ hlws_virtual_ip }}"
      letsencrypt:
        resource:
          class: service
          type: letsencrypt
    pacemaker_constraints:
      - type: colocation
        rsc: virtualip
        with-rsc: nginx
        score: INFINITY
      - type: colocation
        rsc: letsencrypt
        with-rsc: nginx
        score: INFINITY
  tags:
    - pacemaker
