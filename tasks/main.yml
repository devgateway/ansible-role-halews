---
- name: Install Firewalld
  package:
    name: firewalld
  tags: [firewall]

- name: Start Firewalld
  service:
    name: firewalld
    state: started
  tags: [firewall]

- name: Open ports in the firewall
  firewalld:
    state: enabled
    permanent: true
    immediate: true
    service: "{{ item }}"
  loop:
    - glusterfs
    - http
    - https
    - high-availability
  tags: [firewall]

- name: Configure GlusterFS
  include_role:
    name: devgateway.glusterfs
  vars:
    glfs_mount_point: "{{ hlws_letsencrypt_dir }}"
    glfs_volume: "{{ hlws_gluster_volume }}"
  tags: [glusterfs]

- name: Install Nginx reload script
  copy:
    dest: "{{ hlws_nginx_reload_script }}"
    mode: 0755
    content: |
      #!/bin/bash
      /usr/sbin/nginx -t && /usr/bin/systemctl reload nginx.service
  tags: [nginx, letsencrypt]

- name: Configure Letsencrypt
  include_role:
    name: devgateway.letsencrypt
  vars:
    le_enable_timer: false
    le_email: "{{ hlws_letsencrypt_email }}"
    le_service_requires:
      - "{{ hlws_letsencrypt_dir[1:] | replace('/', '-') }}.mount"
    le_deploy_hook: "{{ hlws_nginx_reload_script }}"
    le_unit_name: "{{ hlws_update_unit }}"
    le_domains: "{{ hlws_domains }}"
    le_plugin: "{{ hlws_letsencrypt_plugin }}"
    le_plugin_settings: "{{ hlws_letsencrypt_plugin_settings }}"
    # buggy Ansible, fixed in 2.7
    lgrt_name: letsencrypt
    lgrt_path: /var/log/letsencrypt/letsencrypt.log
    lgrt_config: {}
  notify:
    - Reload Nginx
  tags: [letsencrypt, live]

- name: Generate random Diffie-Hellmann params
  command: >-
    openssl dhparam
    -out {{ hlws_dhparam | quote }}
    {{ hlws_dhparam_bits }}
  args:
    creates: "{{ hlws_dhparam }}"
  notify:
    - Reload Nginx
  tags: [nginx]

- name: Configure Nginx
  include_role:
    name: devgateway.nginx
    tasks_from: nginx
  vars:
    ngx_settings: "{{ hlws_ngx_defaults | combine(hlws_ngx_settings, recursive = true) }}"
  notify:
    - Test Nginx configuration
    - Reload Nginx
  tags:
    - nginx

- name: Configure Pacemaker
  include_role:
    name: devgateway.pacemaker
  vars:
    pacemaker_cluster_options:
      no-quorum-policy: ignore
      stonith-enabled: false
    pacemaker_simple_resources:
      nginx:
        resource:
          class: service
          type: nginx
        op:
          - name: monitor
            interval: "{{ hlws_resource_monitor_interval }}"
      virtualip:
        resource:
          class: ocf
          provider: heartbeat
          type: IPaddr2
        options:
          ip: "{{ hlws_virtual_ip }}"
        op:
          - name: monitor
            interval: "{{ hlws_resource_monitor_interval }}"
      letsencrypt:
        resource:
          class: service
          type: letsencrypt
        op:
          - name: monitor
            interval: "{{ hlws_resource_monitor_interval }}"
    pacemaker_constraints:
      - type: colocation
        rsc: nginx
        with-rsc: virtualip
        score: INFINITY
      - type: colocation
        rsc: letsencrypt
        with-rsc: nginx
        score: INFINITY
  tags:
    - pacemaker
